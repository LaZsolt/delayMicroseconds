														ATmega	0		low		high	LGT		0		low		high
delayMicroseconds(3);       // = 6 cycles
    2e8c:	82 e0       	ldi		r24, 0x03					1		1		1				1		1		1
    2e8e:	90 e0       	ldi		r25, 0x00					1		1		1				1		1		1
    2e90:	0e 94 e7 19 	call	0x33ce;<delayMicroseconds>	4		4		4				2		2		2


000033ce <delayMicroseconds>:
#elif F_CPU >= 12000000L
  // for a 1 microsecond delay, simply return.  the overhead
  // of the function call takes 14 (16) cycles, which is 1.25 us
  if (us <= 1) return; // = 3 cycles, (4 when true)
    33ce:	82 30       	cpi		r24, 0x02	; 2				1		1		1				1		1		1
    33d0:	91 05       	cpc		r25, r1						1		1		1				1		1		1
    33d2:	40 f0       	brcs	.+16     	; 0x33e4		2		1		1				2		1		1

  // the following loop takes 1/3 of a microsecond (4 cycles)
  // per iteration, so execute it three times for each microsecond of
  // delay requested.
  us = (us << 1) + us; // x3 us, = 5 cycles
    33d4:	9c 01       	movw	r18, r24							1		1						1		1
    33d6:	22 0f       	add		r18, r18							1		1						1		1
    33d8:	33 1f       	adc		r19, r19							1		1						1		1

  // account for the time taken in the preceeding commands.
  // we just burned 20 (22) cycles above, remove 5, (5*4=20)
  // us is at least 6 so we can substract 5
  us -= 5; // = 2 cycles
    33da:	05 97       	sbiw	r24, 0x05	; 5						2		2						1		1

    33dc:	82 0f       	add		r24, r18							1		1						1		1
    33de:	93 1f       	adc		r25, r19							1		1						1		1

  // busy wait
  __asm__ __volatile__
    33e0:	01 97       	sbiw	r24, 0x01	; 1
    33e2:	f1 f7       	brne	.-4      	; 0x33e0					4*r24-1							4*r24-1 (nop inserted)

  // return = 4 cycles
    33e4:	08 95       	ret									4		4		4				2		2		2

												wasted cycles:	14			20					10			15	 (Need 4 more nops at begin)

