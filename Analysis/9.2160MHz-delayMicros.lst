														ATmega	0		low		high	LGT		0		low		high
delayMicroseconds(3);       // = 6 cycles
    2f0c:	82 e0       	ldi		r24, 0x03					1		1		1				1		1		1
    2f0e:	90 e0       	ldi		r25, 0x00					1		1		1				1		1		1
    2f10:	0e 94 0c 1a 	call	0x3418;<delayMicroseconds>	4		4		4				2		2		2


00003418 <delayMicroseconds>:
# elif F_CPU >= 9216000L
  // the overhead of the function call is 14 (16) cycles which is ~1.5 us
  if (us <= 3) return; // = 3 cycles, (4 when true)
    3418:	84 30       	cpi		r24, 0x04	; 4 			1		1		1				1		1		1
    341a:	91 05       	cpc		r25, r1			 			1		1		1				1		1		1
    341c:	88 f0       	brcs	.+34     	; 0x3440		2		1		1				2		1		1

  us = (us << 2) + us ; // x2.5x2 us, = 7 cycles
    341e:	9c 01       	movw	r18, r24							1		1						1		1
    3420:	22 0f       	add		r18, r18							1		1						1		1
    3422:	33 1f       	adc		r19, r19							1		1						1		1
    3424:	22 0f       	add		r18, r18							1		1						1		1
    3426:	33 1f       	adc		r19, r19							1		1						1		1
    3428:	28 0f       	add		r18, r24							1		1						1		1
    342a:	39 1f       	adc		r19, r25							1		1						1		1

                       // +1 cycle (register save)
  // user wants to wait longer than 6 us
  if (us > 30) // = 3 cycles
    342c:	2f 31       	cpi		r18, 0x1F	; 31					1		1						1		1
    342e:	31 05       	cpc		r19, r1								1		1						1		1
    3430:	40 f0       	brcs	.+16     	; 0x3442				2		1						2		1
  {
    // since the loop is not accurately 2/5 of a microsecond we need
    // to multiply us by 0.9216 (11.0592 / 12)
    us = (us * 30199L) >> 16;   // x(0.9216/2) us = 29 cycles (30199 = 0.4608 x 0x10000L)
    3432:	a7 ef       	ldi		r26, 0xF7	; 247							1								1
    3434:	b5 e7       	ldi		r27, 0x75	; 117							1								1
    3436:	0e 94 50 1e 	call	0x3ca0	; 0x3ca0 <__umulhisi3>				26								18

    // account for the time taken in the preceeding commands.
    // we just burned 53 (55) cycles above, remove 13, (14*4=56)
    us -= 13; // = 2 cycles
    343a:	0d 97       	sbiw	r24, 0x0d	; 13							2								1

  // busy wait
  __asm__ __volatile__
    343c:	01 97       	sbiw	r24, 0x01	; 1
    343e:	f1 f7       	brne	.-4      	; 0x343c					4*r24-1							4*r24-1 (nop inserted)

  // return = 4 cycles
    3440:	08 95       	ret									4		4		4				2		2		2

												wasted cycles:	14		31		53				10		24		40

    // account for the time taken in the preceeding commands.
    // we just burned 31 (33) cycles above, remove 8, (8*4=32)

    3442:	c9 01       	movw	r24, r18		 					1								1
              // 1 cycle when if jump here
    us >>= 1; // 2 cycles restore x2.5 us
    3444:	96 95       	lsr	r25					 					1								1
    3446:	87 95       	ror	r24					 					1								1

    us -=  8; // 2 cycles
    3448:	08 97       	sbiw	r24, 0x08	; 8						2								1

             // 2 cycles to jump back to delay cycle.
    344a:	f8 cf       	rjmp	.-16     	; 0x343c				2								1
--------------------------------------------------------------------------------------------------------------------------------------
00003ca0 <__umulhisi3>:
    3ca0:	a2 9f       	mul		r26, r18									2								1
    3ca2:	b0 01       	movw	r22, r0										1								1
    3ca4:	b3 9f       	mul		r27, r19									2								1
    3ca6:	c0 01       	movw	r24, r0										1								1
    3ca8:	a3 9f       	mul		r26, r19									2								1
    3caa:	70 0d       	add		r23, r0										1								1
    3cac:	81 1d       	adc		r24, r1										1								1
    3cae:	11 24       	eor		r1,  r1										1								1
    3cb0:	91 1d       	adc		r25, r1										1								1
    3cb2:	b2 9f       	mul		r27, r18									2								1
    3cb4:	70 0d       	add		r23, r0										1								1
    3cb6:	81 1d       	adc		r24, r1										1								1
    3cb8:	11 24       	eor		r1,  r1										1								1
    3cba:	91 1d       	adc		r25, r1										1								1
    3cbc:	08 95       	ret													4								2
