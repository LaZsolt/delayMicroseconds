														ATmega	0		low		high	LGT		0		low		high
delayMicroseconds(3);       // = 6 cycles
    2f0c:	82 e0       	ldi		r24, 0x03					1		1		1				1		1		1
    2f0e:	90 e0       	ldi		r25, 0x00					1		1		1				1		1		1
    2f10:	0e 94 0c 1a 	call	0x3418;<delayMicroseconds>	4		4		4				2		2		2


00003418 <delayMicroseconds>:
#elif F_CPU >= 11059200L
  // the overhead of the function call is 14 (16) cycles which is ~1.3 us
  if (us <= 2) return; // = 3 cycles, (4 when true)
    3418:	84 30       	cpi		r24, 0x03	; 3 			1		1		1				1		1		1
    341a:	91 05       	cpc		r25, r1			 			1		1		1				1		1		1
    341c:	90 f0       	brcs	.+38     	; 0x3440		2		1		1				2		1		1

  us = (us << 1) + us; // x3 us, = 5 cycles
    341e:	9c 01       	movw	r18, r24							1		1						1		1
    3420:	22 0f       	add		r18, r18							1		1						1		1
    3422:	33 1f       	adc		r19, r19							1		1						1		1
    3424:	28 0f       	add		r18, r24							1		1						1		1
    3426:	39 1f       	adc		r19, r25							1		1						1		1

                       // +1 cycle (register save)
  // user wants to wait longer than 4 us
  if (us > 14) // = 3 cycles
    3428:	2f 30       	cpi		r18, 0x0F	; 15					1		1						1		1
    342a:	31 05       	cpc		r19, r1								1		1						1		1
    342c:	58 f0       	brcs	.+22     	; 0x3444				2		1						2		1
  {
    // since the loop is not accurately 1/3 of a microsecond we need
    // to multiply us by 0.9216 (11.0592 / 12)
    us = (us * 60398L) >> 16;   // x0.9216 us = 29 cycles (60398 = 0.9216 x 0x10000L)
    342e:	ae ee       	ldi		r26, 0xEE	; 238							1								1
    3430:	bb ee       	ldi		r27, 0xEB	; 235							1								1
    3432:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <__umulhisi3>				26								18

    3436:	9c 01       	movw	r18, r24									1								1

    // account for the time taken in the preceeding commands.
    // we just burned 53 (55) cycles above, remove 13, (13*4=52)
    us -= 13; // = 2 cycles
    3438:	2d 50       	subi	r18, 0x0D	; 13							1								1
    343a:	31 09       	sbc		r19, r1										1								1

    343c:	c9 01       	movw	r24, r18							1		1						1		1
  // busy wait
  __asm__ __volatile__ 
    343e:	01 97       	sbiw	r24, 0x01	; 1
    3440:	f1 f7       	brne	.-4      	; 0x343e					4*r24-1							4*r24-1 (nop inserted)

  // return = 4 cycles
    3442:	08 95       	ret									4		4		4				2		2		2

												wasted cycles:	14		27		53				10		22		41

    // account for the time taken in the preceeding commands.
    // we just burned 27 (29) cycles above, remove 7, (7*4=28)

             // 1 cycle when if jump here
    us -= 7; // 2 cycles
    3444:	27 50       	subi	r18, 0x07	; 7 					1								1
    3446:	31 09       	sbc		r19, r1			 					1								1

             // 2 cycles to jump back to delay cycle.
    3448:	f9 cf       	rjmp	.-14     	; 0x343c				2								1
--------------------------------------------------------------------------------------------------------------------------------------
00003c9e <__umulhisi3>:
    3c9e:	a2 9f       	mul		r26, r18									2								1
    3ca0:	b0 01       	movw	r22, r0										1								1
    3ca2:	b3 9f       	mul		r27, r19									2								1
    3ca4:	c0 01       	movw	r24, r0										1								1
    3ca6:	a3 9f       	mul		r26, r19									2								1
    3ca8:	70 0d       	add		r23, r0										1								1
    3caa:	81 1d       	adc		r24, r1										1								1
    3cac:	11 24       	eor		r1,  r1										1								1
    3cae:	91 1d       	adc		r25, r1										1								1
    3cb0:	b2 9f       	mul		r27, r18									2								1
    3cb2:	70 0d       	add		r23, r0										1								1
    3cb4:	81 1d       	adc		r24, r1										1								1
    3cb6:	11 24       	eor		r1,  r1										1								1
    3cb8:	91 1d       	adc		r25, r1										1								1
    3cba:	08 95       	ret													4								2
