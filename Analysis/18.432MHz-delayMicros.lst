														ATmega	0		low		high	LGT		0		low		high
delayMicroseconds(3);       // = 6 cycles
    2f0c:	82 e0       	ldi		r24, 0x03					1		1		1				1		1		1
    2f0e:	90 e0       	ldi		r25, 0x00					1		1		1				1		1		1
    2f10:	0e 94 fc 19 	call	0x33f8;<delayMicroseconds>	4		4		4				2		2		2


000033f8 <delayMicroseconds>:
#elif F_CPU >= 18432000L
  __asm__ __volatile__  // just waiting 4 cycles
    33f8:	00 00       	nop									1		1		1				1		1		1
    33fa:	00 00       	nop									1		1		1				1		1		1
    33fc:	00 00       	nop									1		1		1				1		1		1
    33fe:	00 00       	nop									1		1		1				1		1		1

  // for a one-microsecond delay, simply return.  the overhead
  // of the function call takes 18 (20) cycles, which is aprox. 1us
  if (us <= 1) return; // = 3 cycles, (4 when true)
    3400:	82 30       	cpi		r24, 0x02	; 2				1		1		1				1		1		1
    3402:	91 05       	cpc		r25, r1			 			1		1		1				1		1		1
    3404:	a0 f0       	brcs	.+40     	; 0x342e		2		1		1				2		1		1

  // the following loop takes nearly 1/5 (0.217%) of a microsecond (4 cycles)
  // per iteration, so execute it five times for each microsecond of
  // delay requested.
  us = (us << 2) + us; // x5 us, = 7 cycles
    3406:	9c 01       	movw	r18, r24							1		1						1		1
    3408:	22 0f       	add		r18, r18							1		1						1		1
    340a:	33 1f       	adc		r19, r19							1		1						1		1
    340c:	22 0f       	add		r18, r18							1		1						1		1
    340e:	33 1f       	adc		r19, r19							1		1						1		1
    3410:	28 0f       	add		r18, r24							1		1						1		1
    3412:	39 1f       	adc		r19, r25							1		1						1		1

  // user wants to wait longer than 3 us
  if (us > 15) // = 3 cycles
    3414:	20 31       	cpi		r18, 0x10	; 16					1		1						1		1
    3416:	31 05       	cpc		r19, r1								1		1						1		1
    3418:	58 f0       	brcs	.+22     	; 0x3430				2		1						2		1

    // Since the loop is not accurately 1/5 of a microsecond we need
    // to multiply us by 0.9216 (18.432 / 20)
    //us = (us >> 1) + (us >> 2) + (us >> 3) + (us >> 4); // x0.9375 us, = 50 cycles (really!)
    us = (us * 60398L) >> 16;   // x0.9216 us = 29 cycles (60398 = 0.9216 * 0x10000L)
    341a:	ae ee       	ldi		r26, 0xEE	; 238							1								1
    341c:	bb ee       	ldi		r27, 0xEB	; 235							1								1
    341e:	0e 94 45 1e 	call	0x3c8a	; 0x3c8a <__umulhisi3>				26								18

    3422:	9c 01       	movw	r18, r24									1								1

    // account for the time taken in the preceeding commands.
    // we just burned 59 (61) cycles above, remove 15, (15*4=60)
    us -= 15; // = 2 cycles
    3424:	2f 50       	subi	r18, 0x0F	; 15							1								1
    3426:	31 09       	sbc		r19, r1										1								1

    3428:	c9 01       	movw	r24, r18							1		1						1		1
  // busy wait
  __asm__ __volatile__
    342a:	01 97       	sbiw	r24, 0x01	; 1
    342c:	f1 f7       	brne	.-4      	; 0x342a					4*r24-1							4*r24-1 (nop inserted)

  // return = 4 cycles
    342e:	08 95       	ret									4		4		4				2		2		2

												wasted cycles:	18		33		59				14		28		47

    // account for the time taken in the preceeding commands.
    // we just burned 33 (35) cycles above, remove 9, (9*4=36)

             // 1 cycle when if jump here
    us -= 9; // 2 cycles
    3430:	29 50       	subi	r18, 0x09	; 9 					1								1
    3432:	31 09       	sbc		r19, r1 							1								1

             // 2 cycles to jump back to delay cycle.
    3434:	f9 cf       	rjmp	.-14     	; 0x3428				2								1
--------------------------------------------------------------------------------------------------------------------------------------
00003c8a <__umulhisi3>:
    3c8a:	a2 9f       	mul		r26, r18									2								1
    3c8c:	b0 01       	movw	r22, r0										1								1
    3c8e:	b3 9f       	mul		r27, r19									2								1
    3c90:	c0 01       	movw	r24, r0										1								1
    3c92:	a3 9f       	mul		r26, r19									2								1
    3c94:	70 0d       	add		r23, r0										1								1
    3c96:	81 1d       	adc		r24, r1										1								1
    3c98:	11 24       	eor		r1, r1										1								1
    3c9a:	91 1d       	adc		r25, r1										1								1
    3c9c:	b2 9f       	mul		r27, r18									2								1
    3c9e:	70 0d       	add		r23, r0										1								1
    3ca0:	81 1d       	adc		r24, r1										1								1
    3ca2:	11 24       	eor		r1, r1										1								1
    3ca4:	91 1d       	adc		r25, r1										1								1
    3ca6:	08 95       	ret													4								2
